@use "sass:math";

//breakpoints
$breakpoints: (
  "xs": 0,
  "sm": 480px,
  "md": 720px,
  "lg": 960px,
  "xl": 1200px,
);

@mixin xs {
  @media (min-width: map-get($breakpoints, "xs")) {
    @content;
  }
}

@mixin sm {
  @media (min-width: map-get($breakpoints, "sm")) {
    @content;
  }
}

@mixin md {
  @media (min-width: map-get($breakpoints, "md")) {
    @content;
  }
}

@mixin lg {
  @media (min-width: map-get($breakpoints, "lg")) {
    @content;
  }
}

@mixin xl {
  @media (min-width: map-get($breakpoints, "xl")) {
    @content;
  }
}

@mixin breakpoint($bp: 0) {
  @media(min-width: $bp) {
    @content
  }
}

$grid-width: 1080px;
$grid-columns: 8;
$grid-gutters: (
  "0": 0,
  "12": 12px,
  "24": 24px,
);

$justifications : flex-start, flex-end, center, space-between, space-around;
$alignments: center, start, end, flex-start, flex-end, stretch;

//foundations for grid
.container {
  width: 100%;
  max-width: $grid-width;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}

.row {
  display: flex;
  flex-flow: row wrap;
}

//gutters
@each $key, $val in $grid-gutters {
  .gutter-#{$key} > * {
    padding: $val;
  }

  .gutter-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

//justify content
@each $val in $justifications {
  .content-#{$val} {
    justify-content: $val;
  }
}

//align content
@each $val in $alignments {
  .align-content-#{$val} {
    align-items: $val;
  }
}

@for $i from -1 through $grid-columns {
  @if $i == -1 {
    .order-minus-1 {
      order: $i;
    }
  }
  @else {
    .order-#{$i} {
      order: $i;
    }
  }
}

@include xs {
  @for $i from 1 through $grid-columns {
    .xs-#{$i}-wide {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }

    @if $i == -1 {
      .xs-order-minus-1 {
        order: $i
      }
    }
    @else {
      .xs-order-#{$i} {
        order: $i;
      }
    }
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .sm-#{$i}-wide {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }

    @if $i == -1 {
      .sm-order-minus-1 {
        order: $i
      }
    }
    @else {
      .sm-order-#{$i} {
        order: $i;
      }
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .md-#{$i}-wide {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }

    @if $i == -1 {
      .md-order-minus-1 {
        order: $i
      }
    }
    @else {
      .md-order-#{$i} {
        order: $i;
      }
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .lg-#{$i}-wide {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }

    @if $i == -1 {
      .lg-order-minus-1 {
        order: $i
      }
    }
    @else {
      .lg-order-#{$i} {
        order: $i;
      }
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .xl-#{$i}-wide {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }

    @if $i == -1 {
      .xl-order-minus-1 {
        order: $i
      }
    }
    @else {
      .xl-order-#{$i} {
        order: $i;
      }
    }
  }
}



// obsolete
// .row {
//   max-width: $grid-width;
//   margin: 0 auto;

//   //selects all that ends in (that's what the $ sign is for) -wide
//   [class$="-wide"] {
//     float: left;
//     background-color: $cool-grey8;
//     padding: 10px;
//   }
// }